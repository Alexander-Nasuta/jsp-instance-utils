import random
import logging as log
import numpy as np

log = log.getLogger(__name__)


def generate_jsp_instance(n_jobs: int, n_machines: int, min_processing_time: int = 2,
                          max_processing_time: int = 20) -> (np.array, np.array):
    """
    generates a singe jsp instance and saves it in Taillard-specification (http://jobshop.jjvh.nl/explanation.php)
    and saves it in a subdirectory (according to the size of the jsp) in the custom instance folder.
    See `jss_utils.PATHS`

    the order of the machines for the jobs and the duration of the task within a job are chosen randomly.

    the name is generated by the `jss_util.name_generator.generate_name`-fuction.

    :param n_jobs:              number of jobs
    :param n_machines:          number of machines
    :param min_processing_time: minimal duration of a task within a job
    :param max_processing_time: maximal duration of a task within a job

    :return:                    jsp as numpy array, Taillard style jsp numpy array

    """
    log.debug(f"generating jsp instance of size ({n_jobs}, {n_machines}) (#jobs, #machines).")
    machine_order = [
        random.sample(list(range(0, n_machines)), n_machines) for _ in range(n_jobs)
    ]
    processing_times = [
        [random.randint(min_processing_time, max_processing_time) for m in range(n_machines)] for _ in range(n_jobs)
    ]

    specified_jsp = np.array([machine_order, processing_times])

    return specified_jsp


if __name__ == '__main__':
    custom_jsp_instance = generate_jsp_instance(3, 4)
    print(custom_jsp_instance)
